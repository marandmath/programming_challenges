# Problem 2:

# Each new term in the Fibonacci sequence is generated by adding the previous 
# two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not 
# exceed four million, find the sum of the even-valued terms.

# ----------------------------------------------------------------------------

# 1st Way - Naive:
    
# def fib(n):
#     return 1 if n in (0,1) else fib(n-1)+fib(n-2)

# print(sum([fib(x) if (fib(x) <= 4_000_000 and fib(x) % 2 == 0) else 0 for x in range(35)]))

# Takes too long too complete if 4000000 was bigger! - we found that F_{35}=5702887 through a graphic
# calculator so we now that we dont have to go higher than x=35 in the above list comprehension

# ----------------------------------------------------------------------------

# 2nd Way - Mathematical Approach:
    
# We use instead of recursion, the Binet's formula (which we can prove analytically
# or using Linear Algebra and diagonalization) or the rounding formula for
# the calculation of the terms of the Fibbonacci sequence. But this still! requires
# the iteration through all the Fibonacci numbers less than 4 million to pinpoint
# the even ones and them sum them out. What we see through induction is that
# only the terms that have an index that is 0 module 3 == divisible by 3 are
# even in the Fibonacci sequence. Now using Benet's Formula and that F_{35}=5702887 we can
# speed up our results drastically:

phi = (1 + 5**0.5)/2
print(sum([int((phi**n-(-phi)**(-n))/5**0.5) for n in range(35) if n % 3 == 0]))